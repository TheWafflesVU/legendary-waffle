{"ast":null,"code":"var _jsxFileName = \"/Users/zhusiyao/Desktop/test/Mern Stack/frontend/src/pages/Homepage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport { Text, View, Button } from 'react-native';\nimport TinderCard from 'react-tinder-card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%'\n  },\n  header: {\n    color: '#000',\n    fontSize: 30,\n    marginBottom: 30\n  },\n  cardContainer: {\n    width: '70%',\n    height: 600\n  },\n  card: {\n    position: 'absolute',\n    backgroundColor: '#fff',\n    width: '100%',\n    height: 600,\n    shadowColor: 'black',\n    shadowOpacity: 0.2,\n    shadowRadius: 20,\n    borderRadius: 20,\n    resizeMode: 'cover'\n  },\n  cardTitle: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: 25\n  },\n  cardBody: {\n    margin: 30\n  },\n  buttons: {\n    margin: 20,\n    zIndex: -100,\n    flexDirection: 'row'\n  },\n  button: {\n    marginleft: 10\n  },\n  infoText: {\n    height: 28,\n    justifyContent: 'center',\n    display: 'flex',\n    zIndex: -100\n  }\n};\n\n// TODO: Reaplace with actual data\n// Dummy datda for now\nconst db = [{\n  name: 'Richard Hendricks',\n  header: 'Test card 1',\n  desp: 'This is a test card for card.This is a test card for card.This is a test card for card.This is a test card for card.This is a test card for card.This is a test card for card. '\n}, {\n  name: 'Erlich Bachman',\n  header: 'Test card 2',\n  desp: 'This is a test card for card.This is a test card for card.This is a test card for card.This is a test card for card.This is a test card for card.This is a test card for card. '\n}];\nconst alreadyRemoved = [];\nlet charactersState = db; // This fixes issues with updating characters state forcing it to use the current state and not the state that was active when the card was created.\n\nconst Home = () => {\n  _s();\n  const [characters, setCharacters] = useState(db);\n  const [lastDirection, setLastDirection] = useState();\n  const childRefs = useMemo(() => Array(db.length).fill(0).map(i => /*#__PURE__*/React.createRef()), []);\n  const swiped = (direction, nameToDelete) => {\n    console.log('removing: ' + nameToDelete + ' to the ' + direction);\n    setLastDirection(direction);\n    alreadyRemoved.push(nameToDelete);\n  };\n  const outOfFrame = name => {\n    console.log(name + ' left the screen!');\n    charactersState = charactersState.filter(character => character.name !== name);\n    setCharacters(charactersState);\n  };\n  const swipe = dir => {\n    const cardsLeft = characters.filter(person => !alreadyRemoved.includes(person.name));\n    if (cardsLeft.length) {\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].name; // Find the card object to be removed\n      const index = db.map(person => person.name).indexOf(toBeRemoved); // Find the index of which to make the reference to\n      alreadyRemoved.push(toBeRemoved); // Make sure the next card gets removed next time if this card do not have time to exit the screen\n      childRefs[index].current.swipe(dir); // Swipe the card!\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(View, {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(View, {\n      style: styles.cardContainer,\n      children: characters.map((character, index) => /*#__PURE__*/_jsxDEV(TinderCard, {\n        ref: childRefs[index],\n        onSwipe: dir => swiped(dir, character.name),\n        onCardLeftScreen: () => outOfFrame(character.name),\n        children: /*#__PURE__*/_jsxDEV(View, {\n          style: styles.card,\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            style: styles.cardTitle,\n            children: [\" \", character.header, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            style: styles.cardBody,\n            children: character.desp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)\n      }, character.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(View, {\n      style: styles.buttons,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        style: styles.button,\n        onPress: () => swipe('right'),\n        title: \"I am interested!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), lastDirection ? /*#__PURE__*/_jsxDEV(Text, {\n      style: styles.infoText,\n      children: [\"You swiped \", lastDirection]\n    }, lastDirection, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(Text, {\n      style: styles.infoText,\n      children: \"Swipe a card or press a button to get started!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 110\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"XbyafJlPzx9LMylf8GIQJ3Z4KwM=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useMemo","Text","View","Button","TinderCard","styles","container","display","alignItems","justifyContent","width","header","color","fontSize","marginBottom","cardContainer","height","card","position","backgroundColor","shadowColor","shadowOpacity","shadowRadius","borderRadius","resizeMode","cardTitle","cardBody","margin","buttons","zIndex","flexDirection","button","marginleft","infoText","db","name","desp","alreadyRemoved","charactersState","Home","characters","setCharacters","lastDirection","setLastDirection","childRefs","Array","length","fill","map","i","createRef","swiped","direction","nameToDelete","console","log","push","outOfFrame","filter","character","swipe","dir","cardsLeft","person","includes","toBeRemoved","index","indexOf","current"],"sources":["/Users/zhusiyao/Desktop/test/Mern Stack/frontend/src/pages/Homepage.js"],"sourcesContent":["import React, { useState, useMemo } from 'react'\nimport { Text, View, Button } from 'react-native'\nimport TinderCard from 'react-tinder-card'\n\nconst styles = {\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n  },\n  header: {\n    color: '#000',\n    fontSize: 30,\n    marginBottom: 30,\n  },\n  cardContainer: {\n    width: '70%',\n    height: 600,\n  },\n  card: {\n    position: 'absolute',\n    backgroundColor: '#fff',\n    width: '100%',\n    height: 600,\n    shadowColor: 'black',\n    shadowOpacity: 0.2,\n    shadowRadius: 20,\n    borderRadius: 20,\n    resizeMode: 'cover',\n  },\n  cardTitle: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: 25\n  },\n  cardBody: {\n    margin: 30\n  },\n  buttons: {\n    margin: 20,\n    zIndex: -100,\n    flexDirection: 'row',\n  },\n  button: {\n    marginleft: 10\n  },\n  infoText: {\n    height: 28,\n    justifyContent: 'center',\n    display: 'flex',\n    zIndex: -100,\n  }\n}\n\n// TODO: Reaplace with actual data\n// Dummy datda for now\nconst db = [\n  {\n    name: 'Richard Hendricks',\n    header: 'Test card 1',\n    desp: 'This is a test card for card.This is a test card for card.This is a test card for card.This is a test card for card.This is a test card for card.This is a test card for card. ',\n\n  },\n  {\n    name: 'Erlich Bachman',\n    header: 'Test card 2',\n    desp: 'This is a test card for card.This is a test card for card.This is a test card for card.This is a test card for card.This is a test card for card.This is a test card for card. ',\n\n  },\n]\n\nconst alreadyRemoved = []\nlet charactersState = db // This fixes issues with updating characters state forcing it to use the current state and not the state that was active when the card was created.\n\nconst Home = () => {\n  const [characters, setCharacters] = useState(db)\n  const [lastDirection, setLastDirection] = useState()\n\n  const childRefs = useMemo(() => Array(db.length).fill(0).map(i => React.createRef()), [])\n\n  const swiped = (direction, nameToDelete) => {\n    console.log('removing: ' + nameToDelete + ' to the ' + direction)\n    setLastDirection(direction)\n    alreadyRemoved.push(nameToDelete)\n  }\n\n  const outOfFrame = (name) => {\n    console.log(name + ' left the screen!')\n    charactersState = charactersState.filter(character => character.name !== name)\n    setCharacters(charactersState)\n  }\n\n  const swipe = (dir) => {\n    const cardsLeft = characters.filter(person => !alreadyRemoved.includes(person.name))\n    if (cardsLeft.length) {\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].name // Find the card object to be removed\n      const index = db.map(person => person.name).indexOf(toBeRemoved) // Find the index of which to make the reference to\n      alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n      childRefs[index].current.swipe(dir) // Swipe the card!\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n\n      <View style={styles.cardContainer}>\n        \n        {characters.map((character, index) =>\n          <TinderCard ref={childRefs[index]} key={character.name} onSwipe={(dir) => swiped(dir, character.name)} onCardLeftScreen={() => outOfFrame(character.name)}>\n            <View style={styles.card}>\n              <Text style={styles.cardTitle}> { character.header } </Text>\n              <br />\n              <Text style={styles.cardBody}>{ character.desp }</Text>\n            </View>\n          </TinderCard>\n        )}\n\n      </View>\n\n      <View style={styles.buttons}>\n\n        <Button style={styles.button} onPress={() => swipe('right')} title='I am interested!' />\n      </View>\n\n      {lastDirection ? <Text style={styles.infoText} key={lastDirection}>You swiped {lastDirection}</Text> : <Text style={styles.infoText}>Swipe a card or press a button to get started!</Text>}\n    \n    </View>\n  )\n}\n\nexport default Home"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}